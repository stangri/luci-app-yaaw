permissions:
  contents: write
name: Build OpenWrt Package

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    name: Build for ${{ matrix.version }} / ${{ matrix.target }}
    runs-on: ubuntu-latest
    env:
      REPO_APK_KEY: ${{ secrets.REPO_APK_KEY }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - version: openwrt-24.10
            target: x86_64
            suffix: all
          # - version: openwrt-24.10
          #   target: aarch64_cortex-a53
          # - version: openwrt-24.10
          #   target: aarch64_generic
          # - version: openwrt-24.10
          #   target: arm_cortex-a7
          # - version: openwrt-24.10
          #   target: arm_cortex-a9
          # - version: openwrt-24.10
          #   target: mips_24kc
          # - version: openwrt-24.10
          #   target: mipsel_24kc
          - version: snapshots
            target: x86_64
            suffix: noarch
          # - version: snapshots
          #   target: aarch64_cortex-a53
          # - version: snapshots
          #   target: aarch64_generic
          # - version: snapshots
          #   target: arm_cortex-a7
          # - version: snapshots
          #   target: arm_cortex-a9
          # - version: snapshots
          #   target: mips_24kc
          # - version: snapshots
          #   target: mipsel_24kc

    steps:
      - name: üßæ Checkout repo (with submodules)
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: üîÅ Sync & init submodules
        run: |
          git submodule sync --recursive
          git submodule update --init --recursive
          git submodule status --recursive

      - name: üîé Verify submodule contents
        run: |
          set -e
          echo "Submodule status:" && git submodule status --recursive || true
          echo "Listing root/www/yaaw:" && ls -la root/www/yaaw || true
          echo "Sample files under root/www/yaaw:" && find root/www/yaaw -maxdepth 1 -type f | head -n 20 || true

      - name: üìõ Set PKG_NAME from repo
        run: echo "PKG_NAME=${{ github.event.repository.name }}" >> "$GITHUB_ENV"

      - name: üß∞ Set up melmac feed structure
        run: |
          set -e
          # Also add a shim so ../../luci.mk from package/feeds/melmac/<pkg> works:
          mkdir -p package
          printf 'include $(TOPDIR)/feeds/luci/luci.mk\n' > package/luci.mk

          # LuCI-style layout so ../../luci.mk resolves from applications/<pkg>
          mkdir -p feed/luci/applications/${PKG_NAME}

          # Add shim luci/luci.mk pointing to the official LuCI feed
          mkdir -p feed/luci
          printf 'include $(TOPDIR)/feeds/luci/luci.mk\n' > feed/luci/luci.mk

          # Copy the package sources into the feed subdir (exclude CI and feed itself)
          rsync -av \
            --exclude='.git' \
            --exclude='feed' \
            --exclude='.github' \
            ./ feed/luci/applications/${PKG_NAME}/

      - name: üßÆ Compute ARCH
        run: |
          if [ "${{ matrix.version }}" = "snapshots" ]; then
            echo "ARCH=${{ matrix.target }}-SNAPSHOT" >> "$GITHUB_ENV"
          else
            echo "ARCH=${{ matrix.target }}-${{ matrix.version }}" >> "$GITHUB_ENV"
          fi

      - name: üèóÔ∏è Build with OpenWrt SDK
        uses: openwrt/gh-action-sdk@v8
        env:
          ARCH: ${{ env.ARCH }}
          FEEDNAME: melmac
          PACKAGES: ${{ env.PKG_NAME }}
          INDEX: 0
          FEED_DIR: ${{ github.workspace }}/feed
          NO_SHFMT_CHECK: 1
          NO_REFRESH_CHECK: 1
          PRIVATE_KEY: ${{ secrets.REPO_APK_KEY }}
          V: sc
          BUILD_LOG: ${{ github.workspace }}/logs

      - name: ‚¨ÜÔ∏è Upload build logs (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sdk-logs-${{ matrix.target }}-${{ matrix.version }}
          path: logs/
          if-no-files-found: ignore

      - name: üîç Debug build output
        run: |
          echo "=== Build directory structure ==="
          find . -name "*.ipk" -type f 2>/dev/null || echo "No .ipk files found"
          echo "=== bin directory structure ==="
          ls -la bin/ 2>/dev/null || echo "No bin directory found"
          if [ -d "bin/packages" ]; then
            echo "=== packages directory structure ==="
            find bin/packages/ -type f -name "*.ipk" 2>/dev/null || echo "No .ipk files in packages directory"
            echo "=== Full packages directory tree ==="
            ls -laR bin/packages/ 2>/dev/null || echo "No packages directory"
          fi

      - name: üè∑Ô∏è Rename APK with version and target
        run: |
          set -euo pipefail
          PKG_VERSION=$(grep -E '^PKG_VERSION *:?=' Makefile | head -n1 | cut -d= -f2 | tr -d '[:space:]')
          PKG_RELEASE=$(grep -E '^PKG_RELEASE *:?=' Makefile | head -n1 | cut -d= -f2 | tr -d '[:space:]')
          for ext in ipk apk; do
            for f in $(find bin/packages -type f -path "*/melmac/*.${ext}"); do
              dir=$(dirname "$f")
              if [ -n "${{ matrix.suffix }}" ]; then
                mv -v "$f" "$dir/${PKG_NAME}-${PKG_VERSION}-${PKG_RELEASE}_${{ matrix.version }}_${{ matrix.suffix }}.${ext}"
              else
                mv -v "$f" "$dir/${PKG_NAME}-${PKG_VERSION}-${PKG_RELEASE}_${{ matrix.version }}_${{ matrix.target }}.${ext}"
              fi
            done
          done

      - name: üì¶ Upload artifact for ${{ matrix.target }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PKG_NAME }}-${{ matrix.target }}-${{ matrix.version }}
          path: |
            bin/packages/*/melmac/${{ env.PKG_NAME }}*.ipk
            bin/packages/*/melmac/${{ env.PKG_NAME }}*.apk
          #            bin/packages/*/melmac/Packages*
          #            bin/packages/*/melmac/index.json
          #            bin/packages/*/melmac/packages.adb
          if-no-files-found: ignore

  release:
    name: Release ${{ github.repository }}
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: üßæ Checkout repo
        uses: actions/checkout@v4

      - name: üîç Extract version and release from Makefile
        id: version
        run: |
          PKG_VERSION=$(grep -E '^PKG_VERSION *:?=' Makefile | head -n1 | cut -d= -f2 | tr -d '[:space:]')
          PKG_RELEASE=$(grep -E '^PKG_RELEASE *:?=' Makefile | head -n1 | cut -d= -f2 | tr -d '[:space:]')
          COMBINED_VERSION="${PKG_VERSION}-${PKG_RELEASE}"
          echo "üì¶ Version: $COMBINED_VERSION"
          echo "version=$COMBINED_VERSION" >> "$GITHUB_OUTPUT"

      - name: ‚¨áÔ∏è Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./release-assets

      - name: üóÉÔ∏è Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: Build v${{ steps.version.outputs.version }}
          files: |
            ./release-assets/**/*.ipk
            ./release-assets/**/*.apk
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
